
EPS_CC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000b26  00000bba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c4  00800100  00800100  00000bba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e5b  00000000  00000000  00000d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073f  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000936  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003b0  00000000  00000000  00003242  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000035f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#include "safe.h"

void safe()
{
	if(md_ch)											//just entered safe mode?
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
	{
		safe_init();
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
	}

	if(main_ct >= WAKE_SAFE)							//time for measuring Vcc and temp?
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
	{
		measure_vcc();									//measure Vcc and temp
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
		measure_temp();
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

		if(TEMP < T_TH || VCC < V_TH)					//too cold or to low voltage for battery1?
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_9>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
		{
			status &= ~(1<<BAT1);						//disconnect battery1
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_16>
  44:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_17>
		}
		if(TEMP>T_TH+T_TH_HYS && VCC>V_TH+V_TH_HYS)		//again warm enough and enough voltage?
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_25>
		{
			status |= (1<<BAT1);						//connect battery1
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
		}
		set_outputs();									//execute changes
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255

		uart_reinit();									//restart UART
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62

		main_ct=0;										//reset main counter
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
	}
	sleep_enable();										//go to sleep
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
	sleep_cpu();
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
	sleep_disable();									//wake up
  86:	a4 3c       	cpi	r26, 0xC4	; 196
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  90:	0c 94 91 05 	jmp	0xb22	; 0xb22 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <flight_init>:
	}
}

void flight_init()
{
	status &= ~(1<<BAT1);						//disable battery 1
  98:	ed e3       	ldi	r30, 0x3D	; 61
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	80 81       	ld	r24, Z
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	80 83       	st	Z, r24
	status &= ~(1<<BACK);						//disable 3v3 backup
  a2:	80 81       	ld	r24, Z
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	80 83       	st	Z, r24
	set_outputs();								//execute output settings
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24

  ae:	0e 94 8b 00 	call	0x116	; 0x116 <set_outputs>
	md_ch=0;									//clear mode-changed flag
}
  b2:	10 92 58 01 	sts	0x0158, r1
  b6:	08 95       	ret

000000b8 <flight>:

#include "flight.h"

void flight()
{
	if(md_ch)									//just entered flight mode?
  b8:	80 91 58 01 	lds	r24, 0x0158
  bc:	81 11       	cpse	r24, r1
	{
		flight_init();
  be:	0e 94 4c 00 	call	0x98	; 0x98 <flight_init>
	}

	if(uart_status==2)							//UART to be answered?
  c2:	80 91 7c 01 	lds	r24, 0x017C
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	11 f4       	brne	.+4      	; 0xce <flight+0x16>
	{
		uart_save_send();
  ca:	0e 94 02 03 	call	0x604	; 0x604 <uart_save_send>
	}

	if(main_ct >= MEASURE_FL)					//time for measuring Vcc and temp?
  ce:	80 91 5a 01 	lds	r24, 0x015A
  d2:	8e 30       	cpi	r24, 0x0E	; 14
  d4:	30 f0       	brcs	.+12     	; 0xe2 <flight+0x2a>
	{
		measure_vcc();							//measure Vcc and temp
  d6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <measure_vcc>
		measure_temp();
  da:	0e 94 19 01 	call	0x232	; 0x232 <measure_temp>

		main_ct=0;								//reset main counter
  de:	10 92 5a 01 	sts	0x015A, r1
	}

	if(mc_comm_ct >= MAX_mc_comm_ct)			//MC communication timeout?
  e2:	80 91 59 01 	lds	r24, 0x0159
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	70 f0       	brcs	.+28     	; 0x106 <flight+0x4e>
	{
		status |= (1<<MCT);						//set MC timeout flag
  ea:	ed e3       	ldi	r30, 0x3D	; 61
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	80 81       	ld	r24, Z
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	80 83       	st	Z, r24
		status |= (1<<MODE_H);					//change to safe mode
  f4:	80 81       	ld	r24, Z
  f6:	80 83       	st	Z, r24
		status &= ~(1<<MODE_L);
  f8:	80 81       	ld	r24, Z
  fa:	8f 7b       	andi	r24, 0xBF	; 191
  fc:	80 83       	st	Z, r24
		md_ch=1;								//set mode-changed flag
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 58 01 	sts	0x0158, r24
 104:	08 95       	ret
	} else {
		sleep_enable();							//go to sleep
 106:	86 b7       	in	r24, 0x36	; 54
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	86 bf       	out	0x36, r24	; 54
		sleep_cpu();
 10c:	88 95       	sleep
		sleep_disable();						//wake up
 10e:	86 b7       	in	r24, 0x36	; 54
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	86 bf       	out	0x36, r24	; 54
 114:	08 95       	ret

00000116 <set_outputs>:
		else
		{
			PORTA &= ~(1<<PA0);
		}
	}*/
	PORTA |= (1<<PA0);
 116:	88 9a       	sbi	0x11, 0	; 17


	//BATTERY 1
	if(FOVR & 0x02)
 118:	80 91 51 01 	lds	r24, 0x0151
 11c:	81 ff       	sbrs	r24, 1
 11e:	08 c0       	rjmp	.+16     	; 0x130 <set_outputs+0x1a>
		{
			if(OVR & 0x02)
 120:	80 91 52 01 	lds	r24, 0x0152
 124:	81 ff       	sbrs	r24, 1
 126:	02 c0       	rjmp	.+4      	; 0x12c <set_outputs+0x16>
			{
				PORTA |= (1<<PA1);
 128:	89 9a       	sbi	0x11, 1	; 17
 12a:	09 c0       	rjmp	.+18     	; 0x13e <set_outputs+0x28>
			}
			else
			{
				PORTA &= ~(1<<PA1);
 12c:	89 98       	cbi	0x11, 1	; 17
 12e:	07 c0       	rjmp	.+14     	; 0x13e <set_outputs+0x28>
			}
		}
		else
		{
			if(status & 0x04)
 130:	80 91 3d 01 	lds	r24, 0x013D
 134:	82 ff       	sbrs	r24, 2
 136:	02 c0       	rjmp	.+4      	; 0x13c <set_outputs+0x26>
			{
				PORTA |= (1<<PA1);
 138:	89 9a       	sbi	0x11, 1	; 17
 13a:	01 c0       	rjmp	.+2      	; 0x13e <set_outputs+0x28>
			}
			else
			{
				PORTA &= ~(1<<PA1);
 13c:	89 98       	cbi	0x11, 1	; 17
			}
		}

	//3V3 BACKUP
	if(FOVR & 0x04)
 13e:	80 91 51 01 	lds	r24, 0x0151
 142:	82 ff       	sbrs	r24, 2
 144:	08 c0       	rjmp	.+16     	; 0x156 <set_outputs+0x40>
			{
				if(OVR & 0x04)
 146:	80 91 52 01 	lds	r24, 0x0152
 14a:	82 ff       	sbrs	r24, 2
 14c:	02 c0       	rjmp	.+4      	; 0x152 <set_outputs+0x3c>
				{
					PORTA |= (1<<PA6);
 14e:	8e 9a       	sbi	0x11, 6	; 17
 150:	08 95       	ret
				}
				else
				{
					PORTA &= ~(1<<PA6);
 152:	8e 98       	cbi	0x11, 6	; 17
 154:	08 95       	ret
				}
			}
			else
			{
				if(status & 0x01)
 156:	80 91 3d 01 	lds	r24, 0x013D
 15a:	80 ff       	sbrs	r24, 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <set_outputs+0x4c>
				{
					PORTA |= (1<<PA6);
 15e:	8e 9a       	sbi	0x11, 6	; 17
 160:	08 95       	ret
				}
				else
				{
					PORTA &= ~(1<<PA6);
 162:	8e 98       	cbi	0x11, 6	; 17
 164:	08 95       	ret

00000166 <io_init>:
 */

#include "io.h"

void io_init()
{
 166:	88 e0       	ldi	r24, 0x08	; 8
	uint8_t i;
	for(i=0;i<8;i++)					//clear force output value register
	{
		FOVR=0x00;
 168:	e1 e5       	ldi	r30, 0x51	; 81
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	10 82       	st	Z, r1
 16e:	81 50       	subi	r24, 0x01	; 1
#include "io.h"

void io_init()
{
	uint8_t i;
	for(i=0;i<8;i++)					//clear force output value register
 170:	e9 f7       	brne	.-6      	; 0x16c <io_init+0x6>
	{
		FOVR=0x00;
	}

	PUEA = 0xBC;						//activate pull-ups for bus and all unused pins
 172:	8c eb       	ldi	r24, 0xBC	; 188
 174:	82 bb       	out	0x12, r24	; 18
	PORTA = 0x00;						//clear PORTA
 176:	11 ba       	out	0x11, r1	; 17
	status |= (1<<I2C);					//enable I2C
 178:	ed e3       	ldi	r30, 0x3D	; 61
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	80 81       	ld	r24, Z
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	80 83       	st	Z, r24
	status &= ~(1<<BAT1);				//disable battery 1
 182:	80 81       	ld	r24, Z
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	80 83       	st	Z, r24
	status &= ~(1<<BACK);				//disable 3v3 backup
 188:	80 81       	ld	r24, Z
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	80 83       	st	Z, r24
	set_outputs();						//execute output settings
 18e:	0e 94 8b 00 	call	0x116	; 0x116 <set_outputs>
	DDRA = (1<<PA0)|(1<<PA1)|(1<<PA6); 	//define PA0,PA1 and PA6 as outputs
 192:	83 e4       	ldi	r24, 0x43	; 67
 194:	80 bb       	out	0x10, r24	; 16

	PUEB = 0x0F;						//activate pull-ups for bus and all unused pins, all pins on port B are inputs
 196:	8f e0       	ldi	r24, 0x0F	; 15
 198:	8e b9       	out	0x0e, r24	; 14

	PUEC = 0x3F;						//activate pull-ups for bus and all unused pins, all pins on port C are inputs
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	8a b9       	out	0x0a, r24	; 10
 19e:	08 95       	ret

000001a0 <main>:

#include "main.h"

int main(void)
{
	powerup();
 1a0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <powerup>

	while(1)											//main loop
	{	
		//if(~(status & 0x80) && (status & 0x40))			//flight mode?
		//{
			flight();									//flight mode
 1a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <flight>
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <main+0x4>

000001aa <measure_vcc>:
 */

#include "measure.h"

void measure_vcc()							//measures the supply voltage
{
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
	uint8_t adc_data;						//ADC result
	float vcc;								//Vcc in Volt


	ADCSRA |= (1<<ADEN);					//enable ADC
 1b2:	1f 9a       	sbi	0x03, 7	; 3
	ADMUX &= ~(1<<REFS0);					//set Vcc as reference voltage
 1b4:	26 98       	cbi	0x04, 6	; 4
	ADMUX |= (1<<REFS1);
 1b6:	27 9a       	sbi	0x04, 7	; 4
	ADMUX |= (1<<MUX0);						//set 1V1 as voltage to be measured
 1b8:	20 9a       	sbi	0x04, 0	; 4
	ADMUX &= ~(1<<MUX1);
 1ba:	21 98       	cbi	0x04, 1	; 4
	ADMUX |= (1<<MUX2);
 1bc:	22 9a       	sbi	0x04, 2	; 4
	ADMUX |= (1<<MUX3);
 1be:	23 9a       	sbi	0x04, 3	; 4
	ADCSRB |= (1<<ADLAR);					//result will be 8 bit left adjusted
 1c0:	13 9a       	sbi	0x02, 3	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	89 ef       	ldi	r24, 0xF9	; 249
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <measure_vcc+0x1c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <measure_vcc+0x22>
 1cc:	00 00       	nop
	_delay_ms(1);							//delay till 1V1 is stable
	ADCSRA |= (1<<ADSC);					//measure
 1ce:	1e 9a       	sbi	0x03, 6	; 3
	ADCSRA &= ~(1<<ADEN);					//disable ADC
 1d0:	1f 98       	cbi	0x03, 7	; 3
	adc_data = ADCH;						//read result
 1d2:	61 b1       	in	r22, 0x01	; 1

	vcc = ADC_REF* 255/adc_data;			//calculate voltage
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__floatsisf>
 1de:	9b 01       	movw	r18, r22
 1e0:	ac 01       	movw	r20, r24
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	70 e4       	ldi	r23, 0x40	; 64
 1e6:	8c e8       	ldi	r24, 0x8C	; 140
 1e8:	93 e4       	ldi	r25, 0x43	; 67
 1ea:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__divsf3>
 1ee:	6b 01       	movw	r12, r22
 1f0:	7c 01       	movw	r14, r24

	if(vcc >= 0 && vcc <= 3.984375)			//result in data range?
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	a9 01       	movw	r20, r18
 1f8:	0e 94 22 05 	call	0xa44	; 0xa44 <__gesf2>
 1fc:	88 23       	and	r24, r24
 1fe:	a4 f0       	brlt	.+40     	; 0x228 <measure_vcc+0x7e>
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	4f e7       	ldi	r20, 0x7F	; 127
 206:	50 e4       	ldi	r21, 0x40	; 64
 208:	c7 01       	movw	r24, r14
 20a:	b6 01       	movw	r22, r12
 20c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__cmpsf2>
 210:	18 16       	cp	r1, r24
 212:	54 f0       	brlt	.+20     	; 0x228 <measure_vcc+0x7e>
	{
		VCC=(uint8_t)vcc*64;				//convert to UFix 3.5 and save
 214:	c7 01       	movw	r24, r14
 216:	b6 01       	movw	r22, r12
 218:	0e 94 44 04 	call	0x888	; 0x888 <__fixunssfsi>
 21c:	62 95       	swap	r22
 21e:	66 0f       	add	r22, r22
 220:	66 0f       	add	r22, r22
 222:	60 7c       	andi	r22, 0xC0	; 192
 224:	60 93 3a 01 	sts	0x013A, r22
	}

}
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <measure_temp>:

void measure_temp()							//measures the internal temperature
{
 232:	cf 92       	push	r12
 234:	df 92       	push	r13
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
	uint8_t adc_res;						//ADC result
	float int_temp;							//temperature in Celsius

	ADCSRA |= (1<<ADEN);					//enable ADC
 23a:	1f 9a       	sbi	0x03, 7	; 3
	ADMUX &= ~(1<<REFS0);					//set 1V1 as reference voltage
 23c:	26 98       	cbi	0x04, 6	; 4
	ADMUX &= ~(1<<REFS1);
 23e:	27 98       	cbi	0x04, 7	; 4
	ADMUX &= ~(1<<MUX0);					//set temperature sensor as channel to be measured
 240:	20 98       	cbi	0x04, 0	; 4
	ADMUX |= (1<<MUX1);
 242:	21 9a       	sbi	0x04, 1	; 4
	ADMUX |= (1<<MUX2);
 244:	22 9a       	sbi	0x04, 2	; 4
	ADMUX |= (1<<MUX3);
 246:	23 9a       	sbi	0x04, 3	; 4
	ADCSRB |= (1<<ADLAR);					//result will be 8 bit left adjusted
 248:	13 9a       	sbi	0x02, 3	; 2
 24a:	89 ef       	ldi	r24, 0xF9	; 249
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <measure_temp+0x1c>
 252:	00 c0       	rjmp	.+0      	; 0x254 <measure_temp+0x22>
 254:	00 00       	nop
	_delay_ms(1);							//delay till 1V1 is stable
	ADCSRA |= (1<<ADSC);					//measure
 256:	1e 9a       	sbi	0x03, 6	; 3
	ADCSRA &= ~(1<<ADEN);					//disable ADC
 258:	1f 98       	cbi	0x03, 7	; 3
	adc_res = ADCH;							//read result
 25a:	61 b1       	in	r22, 0x01	; 1

	int_temp = TEMP_C * adc_res + 273.;		//calculate temperature (in Celsius)
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__floatsisf>
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 e8       	ldi	r20, 0x80	; 128
 26c:	50 e4       	ldi	r21, 0x40	; 64
 26e:	0e 94 26 05 	call	0xa4c	; 0xa4c <__mulsf3>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e8       	ldi	r19, 0x80	; 128
 276:	48 e8       	ldi	r20, 0x88	; 136
 278:	53 e4       	ldi	r21, 0x43	; 67
 27a:	0e 94 6f 03 	call	0x6de	; 0x6de <__addsf3>
 27e:	6b 01       	movw	r12, r22
 280:	7c 01       	movw	r14, r24

	if(int_temp >= -128 && int_temp <= 127)	//result in data range?
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	53 ec       	ldi	r21, 0xC3	; 195
 28a:	0e 94 22 05 	call	0xa44	; 0xa44 <__gesf2>
 28e:	88 23       	and	r24, r24
 290:	84 f0       	brlt	.+32     	; 0x2b2 <measure_temp+0x80>
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	4e ef       	ldi	r20, 0xFE	; 254
 298:	52 e4       	ldi	r21, 0x42	; 66
 29a:	c7 01       	movw	r24, r14
 29c:	b6 01       	movw	r22, r12
 29e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__cmpsf2>
 2a2:	18 16       	cp	r1, r24
 2a4:	34 f0       	brlt	.+12     	; 0x2b2 <measure_temp+0x80>
	{
		TEMP=(int8_t)int_temp;				//convert to Fix 7.0 and save
 2a6:	c7 01       	movw	r24, r14
 2a8:	b6 01       	movw	r22, r12
 2aa:	0e 94 3f 04 	call	0x87e	; 0x87e <__fixsfsi>
 2ae:	60 93 3b 01 	sts	0x013B, r22
	}
}
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	df 90       	pop	r13
 2b8:	cf 90       	pop	r12
 2ba:	08 95       	ret

000002bc <powerup>:

#include "powerup.h"

void powerup()
{
	io_init();							//initialise I/Os
 2bc:	0e 94 b3 00 	call	0x166	; 0x166 <io_init>
	timer_init();						//initialise timer
 2c0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <timer_init>
	uart_init();						//initialise UART
 2c4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <uart_init>
	twi_init();							//initialise TWI
 2c8:	0e 94 a9 01 	call	0x352	; 0x352 <twi_init>
	watchdog_init()	;					//initialise watchdog
 2cc:	0e 94 87 01 	call	0x30e	; 0x30e <watchdog_init>
	set_sleep_mode(SLEEP_MODE_IDLE);	//select sleep mode
 2d0:	86 b7       	in	r24, 0x36	; 54
 2d2:	8f 79       	andi	r24, 0x9F	; 159
 2d4:	86 bf       	out	0x36, r24	; 54

	boot_ct();							//increment boot-counter
	status &= ~(1<<MODE_H);				//set mode to flight
 2d6:	ed e3       	ldi	r30, 0x3D	; 61
 2d8:	f1 e0       	ldi	r31, 0x01	; 1
 2da:	80 81       	ld	r24, Z
 2dc:	80 83       	st	Z, r24
	status |= (1<<MODE_L);
 2de:	80 81       	ld	r24, Z
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	80 83       	st	Z, r24
	md_ch=0x01;							//set mode changed flag
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 58 01 	sts	0x0158, r24

	data[62]=0xAB;						//ID register
 2ea:	8b ea       	ldi	r24, 0xAB	; 171
 2ec:	80 93 3e 01 	sts	0x013E, r24

	sei();								//enable interrupts
 2f0:	78 94       	sei
 2f2:	08 95       	ret

000002f4 <timer_init>:

#include "timer.h"

void timer_init()							//initialise timer
{
	TCCR1B |= 0x03;							//start timer 1 with prescaler 64 -> overflow every 4.19s
 2f4:	e1 e7       	ldi	r30, 0x71	; 113
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	83 60       	ori	r24, 0x03	; 3
 2fc:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE1);					//enable timer 1 overflow interrupt
 2fe:	8a b7       	in	r24, 0x3a	; 58
 300:	80 68       	ori	r24, 0x80	; 128
 302:	8a bf       	out	0x3a, r24	; 58
	main_ct=0;								//reset main counter
 304:	10 92 5a 01 	sts	0x015A, r1
	mc_comm_ct=0;							//reset communication timer
 308:	10 92 59 01 	sts	0x0159, r1
 30c:	08 95       	ret

0000030e <watchdog_init>:
}

void watchdog_init()
{
	wdt_enable(WDTO_8S);					//enable watchdog with 8s interval
 30e:	99 e2       	ldi	r25, 0x29	; 41
 310:	88 ed       	ldi	r24, 0xD8	; 216
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	a8 95       	wdr
 318:	80 93 4f 00 	sts	0x004F, r24
 31c:	90 93 50 00 	sts	0x0050, r25
 320:	0f be       	out	0x3f, r0	; 63
 322:	08 95       	ret

00000324 <__vector_9>:
}

ISR(TIM1_OVF_vect)							//executed every 4.19s
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	8f 93       	push	r24
	main_ct++;								//main counter
 330:	80 91 5a 01 	lds	r24, 0x015A
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 5a 01 	sts	0x015A, r24
	mc_comm_ct++;							//MC communication timeout counter
 33a:	80 91 59 01 	lds	r24, 0x0159
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 59 01 	sts	0x0159, r24

	wdt_reset();							//reset watchdog
 344:	a8 95       	wdr
}
 346:	8f 91       	pop	r24
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <twi_init>:

void twi_init()
{
	int i;

	TWSA=TWI_ADR;														//set TWI address (caveat: *2)
 352:	8a ea       	ldi	r24, 0xAA	; 170
 354:	80 93 7c 00 	sts	0x007C, r24
	TWSCRA = 0x3D;														//enable TWI module, data and address/stop interrupt and smart mode
 358:	8d e3       	ldi	r24, 0x3D	; 61
 35a:	80 93 7f 00 	sts	0x007F, r24
	twi_status=0;														//set TWI status as waiting
 35e:	10 92 5b 01 	sts	0x015B, r1
	new_data_flag=0x00;													//reset new data flag
 362:	10 92 57 01 	sts	0x0157, r1

	for(i=0;i<TWI_REG_NUM;i++)
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
	{
		data[i]=0;
 36a:	fc 01       	movw	r30, r24
 36c:	e0 50       	subi	r30, 0x00	; 0
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	10 82       	st	Z, r1
	TWSA=TWI_ADR;														//set TWI address (caveat: *2)
	TWSCRA = 0x3D;														//enable TWI module, data and address/stop interrupt and smart mode
	twi_status=0;														//set TWI status as waiting
	new_data_flag=0x00;													//reset new data flag

	for(i=0;i<TWI_REG_NUM;i++)
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	88 35       	cpi	r24, 0x58	; 88
 376:	91 05       	cpc	r25, r1
 378:	c1 f7       	brne	.-16     	; 0x36a <twi_init+0x18>
	{
		data[i]=0;
	}
}
 37a:	08 95       	ret

0000037c <__vector_25>:

ISR(TWI_vect)															//does the TWI communication
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	8f 93       	push	r24
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	if((TWSSRA & 0x40)&&(TWSSRA & 0x01)&&(!(TWSSRA & 0x0C)))			//address interrupt, no collisions or bus errors
 38c:	80 91 7d 00 	lds	r24, 0x007D
 390:	86 ff       	sbrs	r24, 6
 392:	2a c0       	rjmp	.+84     	; 0x3e8 <__vector_25+0x6c>
 394:	80 91 7d 00 	lds	r24, 0x007D
 398:	80 ff       	sbrs	r24, 0
 39a:	26 c0       	rjmp	.+76     	; 0x3e8 <__vector_25+0x6c>
 39c:	80 91 7d 00 	lds	r24, 0x007D
 3a0:	8c 70       	andi	r24, 0x0C	; 12
 3a2:	11 f5       	brne	.+68     	; 0x3e8 <__vector_25+0x6c>
	{
		if(twi_status==0)												//TWI is waiting
 3a4:	80 91 5b 01 	lds	r24, 0x015B
 3a8:	81 11       	cpse	r24, r1
 3aa:	09 c0       	rjmp	.+18     	; 0x3be <__vector_25+0x42>
		{
			twi_status=1;												//set status to starting
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 5b 01 	sts	0x015B, r24
			TWSCRB |= 0x03;												//send acknowledge
 3b2:	ee e7       	ldi	r30, 0x7E	; 126
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	83 60       	ori	r24, 0x03	; 3
 3ba:	80 83       	st	Z, r24
 3bc:	8b c0       	rjmp	.+278    	; 0x4d4 <__vector_25+0x158>
		}
		else if(twi_status==2)											//status is register pointer set
 3be:	80 91 5b 01 	lds	r24, 0x015B
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	31 f4       	brne	.+12     	; 0x3d2 <__vector_25+0x56>
		{
			TWSCRB |= 0x03;												//send acknowledge, status is unchanged
 3c6:	ee e7       	ldi	r30, 0x7E	; 126
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	83 60       	ori	r24, 0x03	; 3
 3ce:	80 83       	st	Z, r24
 3d0:	81 c0       	rjmp	.+258    	; 0x4d4 <__vector_25+0x158>
		}
		else
		{
			twi_status=0;												//unexpected case, reset TWI
 3d2:	10 92 5b 01 	sts	0x015B, r1
			TWSSRA |= 1<<TWASIF;
 3d6:	ed e7       	ldi	r30, 0x7D	; 125
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	80 83       	st	Z, r24
			TWSSRA |= 1<<TWDIF;
 3e0:	80 81       	ld	r24, Z
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	80 83       	st	Z, r24
 3e6:	76 c0       	rjmp	.+236    	; 0x4d4 <__vector_25+0x158>
		}
	}
	else if((TWSSRA & 0x80)&&(!(TWSSRA & 0x0C)))						//data interrupt, no collisions or bus errors
 3e8:	80 91 7d 00 	lds	r24, 0x007D
 3ec:	88 23       	and	r24, r24
 3ee:	0c f0       	brlt	.+2      	; 0x3f2 <__vector_25+0x76>
 3f0:	4f c0       	rjmp	.+158    	; 0x490 <__vector_25+0x114>
 3f2:	80 91 7d 00 	lds	r24, 0x007D
 3f6:	8c 70       	andi	r24, 0x0C	; 12
 3f8:	09 f0       	breq	.+2      	; 0x3fc <__vector_25+0x80>
 3fa:	4a c0       	rjmp	.+148    	; 0x490 <__vector_25+0x114>
	{
		if(twi_status==1)												//status is starting
 3fc:	80 91 5b 01 	lds	r24, 0x015B
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	41 f4       	brne	.+16     	; 0x414 <__vector_25+0x98>
		{
			twi_reg_pt=TWSD;											//set register pointer
 404:	80 91 7a 00 	lds	r24, 0x007A
 408:	80 93 5c 01 	sts	0x015C, r24
			twi_status=2;												//set status to register pointer set
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 93 5b 01 	sts	0x015B, r24
 412:	60 c0       	rjmp	.+192    	; 0x4d4 <__vector_25+0x158>
		}
		else if(twi_status==2 || twi_status==3)							//status is register pointer set or communicating
 414:	80 91 5b 01 	lds	r24, 0x015B
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	29 f0       	breq	.+10     	; 0x426 <__vector_25+0xaa>
 41c:	80 91 5b 01 	lds	r24, 0x015B
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	09 f0       	breq	.+2      	; 0x426 <__vector_25+0xaa>
 424:	57 c0       	rjmp	.+174    	; 0x4d4 <__vector_25+0x158>
		{
			twi_status=3;												//set status to communicating
 426:	83 e0       	ldi	r24, 0x03	; 3
 428:	80 93 5b 01 	sts	0x015B, r24
			if(twi_reg_pt<TWI_REG_NUM)									//valid register pointer
 42c:	80 91 5c 01 	lds	r24, 0x015C
 430:	88 35       	cpi	r24, 0x58	; 88
 432:	18 f5       	brcc	.+70     	; 0x47a <__vector_25+0xfe>
			{
				if(TWSSRA & 0x02)										//sending data
 434:	80 91 7d 00 	lds	r24, 0x007D
 438:	81 ff       	sbrs	r24, 1
 43a:	0e c0       	rjmp	.+28     	; 0x458 <__vector_25+0xdc>
				{
					TWSD=data[twi_reg_pt];								//write to data TWI register
 43c:	e0 91 5c 01 	lds	r30, 0x015C
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	e0 50       	subi	r30, 0x00	; 0
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	80 81       	ld	r24, Z
 448:	80 93 7a 00 	sts	0x007A, r24
					twi_reg_pt++;										//increment pointer
 44c:	80 91 5c 01 	lds	r24, 0x015C
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	80 93 5c 01 	sts	0x015C, r24
 456:	3e c0       	rjmp	.+124    	; 0x4d4 <__vector_25+0x158>
				}
				else													//receiving data
				{
					data[twi_reg_pt]=TWSD;								//read data from TWI register
 458:	e0 91 5c 01 	lds	r30, 0x015C
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 91 7a 00 	lds	r24, 0x007A
 462:	e0 50       	subi	r30, 0x00	; 0
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	80 83       	st	Z, r24
					twi_reg_pt++;										//increment pointer
 468:	80 91 5c 01 	lds	r24, 0x015C
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 5c 01 	sts	0x015C, r24
					new_data_flag=0x01;									//set new data flag
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 57 01 	sts	0x0157, r24
 478:	2d c0       	rjmp	.+90     	; 0x4d4 <__vector_25+0x158>
				}
			}
			else														//invalid register pointer
			{
				twi_status=0;											//unexpected case, reset TWI
 47a:	10 92 5b 01 	sts	0x015B, r1
				TWSSRA |= 1<<TWASIF;
 47e:	ed e7       	ldi	r30, 0x7D	; 125
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 64       	ori	r24, 0x40	; 64
 486:	80 83       	st	Z, r24
				TWSSRA |= 1<<TWDIF;
 488:	80 81       	ld	r24, Z
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	80 83       	st	Z, r24
 48e:	22 c0       	rjmp	.+68     	; 0x4d4 <__vector_25+0x158>
			}
		}
	}
	else if((TWSSRA & 0x40)&&(!(TWSSRA & 0x01))&&(!(TWSSRA & 0x0C)))	//stop interrupt, no collisions or bus errors
 490:	80 91 7d 00 	lds	r24, 0x007D
 494:	86 ff       	sbrs	r24, 6
 496:	14 c0       	rjmp	.+40     	; 0x4c0 <__vector_25+0x144>
 498:	80 91 7d 00 	lds	r24, 0x007D
 49c:	80 fd       	sbrc	r24, 0
 49e:	10 c0       	rjmp	.+32     	; 0x4c0 <__vector_25+0x144>
 4a0:	80 91 7d 00 	lds	r24, 0x007D
 4a4:	8c 70       	andi	r24, 0x0C	; 12
 4a6:	61 f4       	brne	.+24     	; 0x4c0 <__vector_25+0x144>
	{
		if(twi_status!=2)
 4a8:	80 91 5b 01 	lds	r24, 0x015B
 4ac:	82 30       	cpi	r24, 0x02	; 2
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <__vector_25+0x138>
		{
			twi_status=0;												//communication, so reset TWI
 4b0:	10 92 5b 01 	sts	0x015B, r1
		}
		TWSSRA &= ~(1<<TWAS);											//clear stop-bit
 4b4:	ed e7       	ldi	r30, 0x7D	; 125
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	8e 7f       	andi	r24, 0xFE	; 254
 4bc:	80 83       	st	Z, r24
 4be:	0a c0       	rjmp	.+20     	; 0x4d4 <__vector_25+0x158>
	}
	else
	{
		twi_status=0;													//unexpected case, reset TWI
 4c0:	10 92 5b 01 	sts	0x015B, r1
		TWSSRA |= 1<<TWASIF;
 4c4:	ed e7       	ldi	r30, 0x7D	; 125
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	80 64       	ori	r24, 0x40	; 64
 4cc:	80 83       	st	Z, r24
		TWSSRA |= 1<<TWDIF;
 4ce:	80 81       	ld	r24, Z
 4d0:	80 68       	ori	r24, 0x80	; 128
 4d2:	80 83       	st	Z, r24
	}
}
 4d4:	ff 91       	pop	r31
 4d6:	ef 91       	pop	r30
 4d8:	8f 91       	pop	r24
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <uart_init>:

#include "uart.h"

void uart_init()
{
	UBRR0H = UBRR_VAL >> 8;								//set symbol rate
 4e4:	12 bc       	out	0x22, r1	; 34
  	UBRR0L = UBRR_VAL & 0xFF;
 4e6:	85 e0       	ldi	r24, 0x05	; 5
 4e8:	81 bd       	out	0x21, r24	; 33
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);					//set frame format: 8 data bit, 1 stop bit
 4ea:	86 e0       	ldi	r24, 0x06	; 6
 4ec:	84 bd       	out	0x24, r24	; 36
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);			//enable receiver, transmitter and interrupt for receive complete
 4ee:	88 e9       	ldi	r24, 0x98	; 152
 4f0:	85 bd       	out	0x25, r24	; 37

	new_data_flag=0x00;									//clear new data flag
 4f2:	10 92 57 01 	sts	0x0157, r1
	uart_status=0;
 4f6:	10 92 7c 01 	sts	0x017C, r1
 4fa:	08 95       	ret

000004fc <__vector_16>:
	UCSR0C = 0x00;										//disable receiver, transmitter and interrupts
	uart_init();										//start UART again
}

ISR(USART0_RXC_vect)
{
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	8f 93       	push	r24
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	uint8_t i = 0;

	if(uart_status != 1)								//Check UART status
 50c:	80 91 7c 01 	lds	r24, 0x017C
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	49 f0       	breq	.+18     	; 0x526 <__stack+0x27>
/*		if(UDR0==0xAA)									//received byte is wake command?
		{
			//do something or nothing
			uart_status = 3;
		}
*/		if(UDR0=='$')									//received byte is start byte?
 514:	80 b5       	in	r24, 0x20	; 32
 516:	84 32       	cpi	r24, 0x24	; 36
 518:	a1 f5       	brne	.+104    	; 0x582 <__stack+0x83>
		{
			uart_status = 1;							//set UART status to receive
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 7c 01 	sts	0x017C, r24
// NA!!!
/*			for(i=0; i<UART_MAXSTRLEN_R; i++)			//clear uart_data
			{
				uart_string_R[i]=0;
			}
*/			uart_data_ct_r=0;							//reset data counter
 520:	10 92 c3 01 	sts	0x01C3, r1
 524:	2e c0       	rjmp	.+92     	; 0x582 <__stack+0x83>
		}
	}
	else 
	{
		if(uart_data_ct_r == UART_MAXSTRLEN_R-2)		//last byte?
 526:	80 91 c3 01 	lds	r24, 0x01C3
 52a:	83 34       	cpi	r24, 0x43	; 67
 52c:	f1 f4       	brne	.+60     	; 0x56a <__stack+0x6b>
		{
			uart_string_R[uart_data_ct_r]=UDR0;			//read last data
 52e:	e0 91 c3 01 	lds	r30, 0x01C3
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 b5       	in	r24, 0x20	; 32
 536:	e2 58       	subi	r30, 0x82	; 130
 538:	fe 4f       	sbci	r31, 0xFE	; 254
 53a:	80 83       	st	Z, r24
			
			uart_status=2;								//set UART status to saving
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	80 93 7c 01 	sts	0x017C, r24
			
			mc_comm_ct=0;								//reset MC-timeout
 542:	10 92 59 01 	sts	0x0159, r1
			if(status & 0x20)							//time-out flag set?
 546:	80 91 3d 01 	lds	r24, 0x013D
 54a:	85 ff       	sbrs	r24, 5
 54c:	1a c0       	rjmp	.+52     	; 0x582 <__stack+0x83>
			{
				status &= ~(1<<MCT);					//clear MC timeout flag
 54e:	ed e3       	ldi	r30, 0x3D	; 61
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	80 81       	ld	r24, Z
 554:	8f 7d       	andi	r24, 0xDF	; 223
 556:	80 83       	st	Z, r24
				status &= ~(1<<MODE_H);					//change to flight mode
 558:	80 81       	ld	r24, Z
 55a:	80 83       	st	Z, r24
				status |= (1<<MODE_L);
 55c:	80 81       	ld	r24, Z
 55e:	80 64       	ori	r24, 0x40	; 64
 560:	80 83       	st	Z, r24
				md_ch=1;								//set mode-changed flag
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 58 01 	sts	0x0158, r24
 568:	0c c0       	rjmp	.+24     	; 0x582 <__stack+0x83>
			}
		}
		else
		{
			uart_string_R[uart_data_ct_r]=UDR0;				//read data
 56a:	e0 91 c3 01 	lds	r30, 0x01C3
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 b5       	in	r24, 0x20	; 32
 572:	e2 58       	subi	r30, 0x82	; 130
 574:	fe 4f       	sbci	r31, 0xFE	; 254
 576:	80 83       	st	Z, r24
			uart_data_ct_r++;								//increment counter			
 578:	80 91 c3 01 	lds	r24, 0x01C3
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 c3 01 	sts	0x01C3, r24
		}

	}
}
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	8f 91       	pop	r24
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti

00000592 <gen_uart_s_str>:

void gen_uart_s_str()									//generate the string sent to MC
{
	int i,j;

	uart_string_S[0]='$';								//starts with $A
 592:	84 e2       	ldi	r24, 0x24	; 36
 594:	80 93 5d 01 	sts	0x015D, r24
	uart_string_S[1]='A';
 598:	81 e4       	ldi	r24, 0x41	; 65
 59a:	80 93 5e 01 	sts	0x015E, r24
	uart_string_S[13]=0x00;	//Force Output Register 3
	uart_string_S[14]=0x00;	//Output Value Register 1
	uart_string_S[15]=0x00;	//Output Value Register 2
	uart_string_S[16]=0x00;	//Output Value Register 3
*/
	j=64;
 59e:	80 e4       	ldi	r24, 0x40	; 64
 5a0:	90 e0       	ldi	r25, 0x00	; 0
	for(i=2;i<26;i++)									//registers 64 to 87
	{
		uart_string_S[i]=data[j];
 5a2:	fc 01       	movw	r30, r24
 5a4:	e0 50       	subi	r30, 0x00	; 0
 5a6:	ff 4f       	sbci	r31, 0xFF	; 255
 5a8:	20 81       	ld	r18, Z
 5aa:	fc 01       	movw	r30, r24
 5ac:	e1 5e       	subi	r30, 0xE1	; 225
 5ae:	fe 4f       	sbci	r31, 0xFE	; 254
 5b0:	20 83       	st	Z, r18
		j++;
 5b2:	01 96       	adiw	r24, 0x01	; 1
	uart_string_S[14]=0x00;	//Output Value Register 1
	uart_string_S[15]=0x00;	//Output Value Register 2
	uart_string_S[16]=0x00;	//Output Value Register 3
*/
	j=64;
	for(i=2;i<26;i++)									//registers 64 to 87
 5b4:	88 35       	cpi	r24, 0x58	; 88
 5b6:	91 05       	cpc	r25, r1
 5b8:	a1 f7       	brne	.-24     	; 0x5a2 <gen_uart_s_str+0x10>
	{
		uart_string_S[i]=data[j];
		j++;
	}	
	uart_string_S[3]=0x01;	//3V3A on to supply OBC
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 60 01 	sts	0x0160, r24

	uart_string_S[26]=data[55];							//number of reboots of CC2
 5c0:	80 91 37 01 	lds	r24, 0x0137
 5c4:	80 93 77 01 	sts	0x0177, r24
	uart_string_S[27]=data[58];							//VCC CC2
 5c8:	80 91 3a 01 	lds	r24, 0x013A
 5cc:	80 93 78 01 	sts	0x0178, r24
	uart_string_S[28]=data[59];							//temperature CC2
 5d0:	80 91 3b 01 	lds	r24, 0x013B
 5d4:	80 93 79 01 	sts	0x0179, r24
	uart_string_S[29]=data[61];							//status CC2	
 5d8:	80 91 3d 01 	lds	r24, 0x013D
 5dc:	80 93 7a 01 	sts	0x017A, r24
	
	//calculate checksum
	uart_string_S[30] = 0;
 5e0:	10 92 7b 01 	sts	0x017B, r1
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t n = 0; n <= 29; n++)
	{
		uart_string_S[30] ^= uart_string_S[n];	//checksum
 5e8:	eb e7       	ldi	r30, 0x7B	; 123
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
 5ec:	20 81       	ld	r18, Z
 5ee:	dc 01       	movw	r26, r24
 5f0:	a3 5a       	subi	r26, 0xA3	; 163
 5f2:	be 4f       	sbci	r27, 0xFE	; 254
 5f4:	3c 91       	ld	r19, X
 5f6:	23 27       	eor	r18, r19
 5f8:	20 83       	st	Z, r18
 5fa:	01 96       	adiw	r24, 0x01	; 1
	uart_string_S[28]=data[59];							//temperature CC2
	uart_string_S[29]=data[61];							//status CC2	
	
	//calculate checksum
	uart_string_S[30] = 0;
	for (uint8_t n = 0; n <= 29; n++)
 5fc:	8e 31       	cpi	r24, 0x1E	; 30
 5fe:	91 05       	cpc	r25, r1
 600:	a9 f7       	brne	.-22     	; 0x5ec <gen_uart_s_str+0x5a>
	{
		uart_string_S[30] ^= uart_string_S[n];	//checksum
	}
									
}
 602:	08 95       	ret

00000604 <uart_save_send>:

	}
}

void uart_save_send()
{
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
	if(cs==1)											//checksum ok -> save data vector
	{
		j=0;
		for(i=2;i<57;i++)								//save data
		{
			data[j]=uart_string_R[i];
 608:	fc 01       	movw	r30, r24
 60a:	e0 58       	subi	r30, 0x80	; 128
 60c:	fe 4f       	sbci	r31, 0xFE	; 254
 60e:	20 81       	ld	r18, Z
 610:	fc 01       	movw	r30, r24
 612:	e0 50       	subi	r30, 0x00	; 0
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	20 83       	st	Z, r18
 618:	01 96       	adiw	r24, 0x01	; 1
	//calculate checksum
	cs = 1;
	if(cs==1)											//checksum ok -> save data vector
	{
		j=0;
		for(i=2;i<57;i++)								//save data
 61a:	87 33       	cpi	r24, 0x37	; 55
 61c:	91 05       	cpc	r25, r1
 61e:	a1 f7       	brne	.-24     	; 0x608 <uart_save_send+0x4>
		{
			data[j]=uart_string_R[i];
			j++;
		}
		
		data[56]=uart_string_R[58];						//VCC CC1
 620:	80 91 b8 01 	lds	r24, 0x01B8
 624:	80 93 38 01 	sts	0x0138, r24
		data[57]=uart_string_R[59];						//temperature of CC1
 628:	80 91 b9 01 	lds	r24, 0x01B9
 62c:	80 93 39 01 	sts	0x0139, r24
		data[60]=uart_string_R[62];						//status CC1
 630:	80 91 bc 01 	lds	r24, 0x01BC
 634:	80 93 3c 01 	sts	0x013C, r24
		//data[62]=uart_string_R[64];						//TBD
		data[62]=0xAB;						//ID register
 638:	8b ea       	ldi	r24, 0xAB	; 171
 63a:	80 93 3e 01 	sts	0x013E, r24
		data[63]=uart_string_R[65];						//TBD
 63e:	80 91 bf 01 	lds	r24, 0x01BF
 642:	80 93 3f 01 	sts	0x013F, r24
		data[81]=uart_string_R[66];						//CC2 FOVR
 646:	80 91 c0 01 	lds	r24, 0x01C0
 64a:	80 93 51 01 	sts	0x0151, r24
		data[82]=uart_string_R[67];						//CC2 OVR
 64e:	80 91 c1 01 	lds	r24, 0x01C1
 652:	80 93 52 01 	sts	0x0152, r24
	}

	gen_uart_s_str();									//generate sending string
 656:	0e 94 c9 02 	call	0x592	; 0x592 <gen_uart_s_str>
	uart_data_ct_s=1;									//reset data counter for transmission
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	80 93 7d 01 	sts	0x017D, r24
	uart_status=3;										//set UART status to sending
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	80 93 7c 01 	sts	0x017C, r24
	new_data_flag=0x00;									//reset new data flag
 666:	10 92 57 01 	sts	0x0157, r1
	UDR0=uart_string_S[0];								//write first byte to data register
 66a:	80 91 5d 01 	lds	r24, 0x015D
 66e:	80 bd       	out	0x20, r24	; 32
	UCSR0B|=1<<UDRIE0;									//enable interrupt for data register empty
 670:	85 b5       	in	r24, 0x25	; 37
 672:	80 62       	ori	r24, 0x20	; 32
 674:	85 bd       	out	0x25, r24	; 37
 676:	08 95       	ret

00000678 <__vector_17>:
	}
									
}

ISR(USART0_DRE_vect)
{
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	8f 93       	push	r24
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
	if(uart_data_ct_s < UART_MAXSTRLEN_S-1)				//last byte not reached
 688:	80 91 7d 01 	lds	r24, 0x017D
 68c:	8e 31       	cpi	r24, 0x1E	; 30
 68e:	68 f4       	brcc	.+26     	; 0x6aa <__vector_17+0x32>
	{
		UDR0 = uart_string_S[uart_data_ct_s];			//write data to data register
 690:	e0 91 7d 01 	lds	r30, 0x017D
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	e3 5a       	subi	r30, 0xA3	; 163
 698:	fe 4f       	sbci	r31, 0xFE	; 254
 69a:	80 81       	ld	r24, Z
 69c:	80 bd       	out	0x20, r24	; 32
		uart_data_ct_s++;								//increment counter
 69e:	80 91 7d 01 	lds	r24, 0x017D
 6a2:	8f 5f       	subi	r24, 0xFF	; 255
 6a4:	80 93 7d 01 	sts	0x017D, r24
 6a8:	11 c0       	rjmp	.+34     	; 0x6cc <__vector_17+0x54>
	}
	else												//last byte reached
	{
		UCSR0B&=~(1<<UDRIE0);							//disable interrupt for empty data register
 6aa:	85 b5       	in	r24, 0x25	; 37
 6ac:	8f 7d       	andi	r24, 0xDF	; 223
 6ae:	85 bd       	out	0x25, r24	; 37
		uart_status=0;									//set UART status to waiting
 6b0:	10 92 7c 01 	sts	0x017C, r1
		UDR0 = uart_string_S[uart_data_ct_s];			//write last byte to data register
 6b4:	e0 91 7d 01 	lds	r30, 0x017D
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	e3 5a       	subi	r30, 0xA3	; 163
 6bc:	fe 4f       	sbci	r31, 0xFE	; 254
 6be:	80 81       	ld	r24, Z
 6c0:	80 bd       	out	0x20, r24	; 32
		uart_data_ct_s++;								//increment counter
 6c2:	80 91 7d 01 	lds	r24, 0x017D
 6c6:	8f 5f       	subi	r24, 0xFF	; 255
 6c8:	80 93 7d 01 	sts	0x017D, r24
	}
}
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	8f 91       	pop	r24
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <__subsf3>:
 6dc:	50 58       	subi	r21, 0x80	; 128

000006de <__addsf3>:
 6de:	bb 27       	eor	r27, r27
 6e0:	aa 27       	eor	r26, r26
 6e2:	0e d0       	rcall	.+28     	; 0x700 <__addsf3x>
 6e4:	75 c1       	rjmp	.+746    	; 0x9d0 <__fp_round>
 6e6:	66 d1       	rcall	.+716    	; 0x9b4 <__fp_pscA>
 6e8:	30 f0       	brcs	.+12     	; 0x6f6 <__addsf3+0x18>
 6ea:	6b d1       	rcall	.+726    	; 0x9c2 <__fp_pscB>
 6ec:	20 f0       	brcs	.+8      	; 0x6f6 <__addsf3+0x18>
 6ee:	31 f4       	brne	.+12     	; 0x6fc <__addsf3+0x1e>
 6f0:	9f 3f       	cpi	r25, 0xFF	; 255
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__addsf3+0x1a>
 6f4:	1e f4       	brtc	.+6      	; 0x6fc <__addsf3+0x1e>
 6f6:	5b c1       	rjmp	.+694    	; 0x9ae <__fp_nan>
 6f8:	0e f4       	brtc	.+2      	; 0x6fc <__addsf3+0x1e>
 6fa:	e0 95       	com	r30
 6fc:	e7 fb       	bst	r30, 7
 6fe:	51 c1       	rjmp	.+674    	; 0x9a2 <__fp_inf>

00000700 <__addsf3x>:
 700:	e9 2f       	mov	r30, r25
 702:	77 d1       	rcall	.+750    	; 0x9f2 <__fp_split3>
 704:	80 f3       	brcs	.-32     	; 0x6e6 <__addsf3+0x8>
 706:	ba 17       	cp	r27, r26
 708:	62 07       	cpc	r22, r18
 70a:	73 07       	cpc	r23, r19
 70c:	84 07       	cpc	r24, r20
 70e:	95 07       	cpc	r25, r21
 710:	18 f0       	brcs	.+6      	; 0x718 <__addsf3x+0x18>
 712:	71 f4       	brne	.+28     	; 0x730 <__addsf3x+0x30>
 714:	9e f5       	brtc	.+102    	; 0x77c <__addsf3x+0x7c>
 716:	8f c1       	rjmp	.+798    	; 0xa36 <__fp_zero>
 718:	0e f4       	brtc	.+2      	; 0x71c <__addsf3x+0x1c>
 71a:	e0 95       	com	r30
 71c:	0b 2e       	mov	r0, r27
 71e:	ba 2f       	mov	r27, r26
 720:	a0 2d       	mov	r26, r0
 722:	0b 01       	movw	r0, r22
 724:	b9 01       	movw	r22, r18
 726:	90 01       	movw	r18, r0
 728:	0c 01       	movw	r0, r24
 72a:	ca 01       	movw	r24, r20
 72c:	a0 01       	movw	r20, r0
 72e:	11 24       	eor	r1, r1
 730:	ff 27       	eor	r31, r31
 732:	59 1b       	sub	r21, r25
 734:	99 f0       	breq	.+38     	; 0x75c <__addsf3x+0x5c>
 736:	59 3f       	cpi	r21, 0xF9	; 249
 738:	50 f4       	brcc	.+20     	; 0x74e <__addsf3x+0x4e>
 73a:	50 3e       	cpi	r21, 0xE0	; 224
 73c:	68 f1       	brcs	.+90     	; 0x798 <__addsf3x+0x98>
 73e:	1a 16       	cp	r1, r26
 740:	f0 40       	sbci	r31, 0x00	; 0
 742:	a2 2f       	mov	r26, r18
 744:	23 2f       	mov	r18, r19
 746:	34 2f       	mov	r19, r20
 748:	44 27       	eor	r20, r20
 74a:	58 5f       	subi	r21, 0xF8	; 248
 74c:	f3 cf       	rjmp	.-26     	; 0x734 <__addsf3x+0x34>
 74e:	46 95       	lsr	r20
 750:	37 95       	ror	r19
 752:	27 95       	ror	r18
 754:	a7 95       	ror	r26
 756:	f0 40       	sbci	r31, 0x00	; 0
 758:	53 95       	inc	r21
 75a:	c9 f7       	brne	.-14     	; 0x74e <__addsf3x+0x4e>
 75c:	7e f4       	brtc	.+30     	; 0x77c <__addsf3x+0x7c>
 75e:	1f 16       	cp	r1, r31
 760:	ba 0b       	sbc	r27, r26
 762:	62 0b       	sbc	r22, r18
 764:	73 0b       	sbc	r23, r19
 766:	84 0b       	sbc	r24, r20
 768:	ba f0       	brmi	.+46     	; 0x798 <__addsf3x+0x98>
 76a:	91 50       	subi	r25, 0x01	; 1
 76c:	a1 f0       	breq	.+40     	; 0x796 <__addsf3x+0x96>
 76e:	ff 0f       	add	r31, r31
 770:	bb 1f       	adc	r27, r27
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	c2 f7       	brpl	.-16     	; 0x76a <__addsf3x+0x6a>
 77a:	0e c0       	rjmp	.+28     	; 0x798 <__addsf3x+0x98>
 77c:	ba 0f       	add	r27, r26
 77e:	62 1f       	adc	r22, r18
 780:	73 1f       	adc	r23, r19
 782:	84 1f       	adc	r24, r20
 784:	48 f4       	brcc	.+18     	; 0x798 <__addsf3x+0x98>
 786:	87 95       	ror	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f7 95       	ror	r31
 790:	9e 3f       	cpi	r25, 0xFE	; 254
 792:	08 f0       	brcs	.+2      	; 0x796 <__addsf3x+0x96>
 794:	b3 cf       	rjmp	.-154    	; 0x6fc <__addsf3+0x1e>
 796:	93 95       	inc	r25
 798:	88 0f       	add	r24, r24
 79a:	08 f0       	brcs	.+2      	; 0x79e <__addsf3x+0x9e>
 79c:	99 27       	eor	r25, r25
 79e:	ee 0f       	add	r30, r30
 7a0:	97 95       	ror	r25
 7a2:	87 95       	ror	r24
 7a4:	08 95       	ret

000007a6 <__cmpsf2>:
 7a6:	d9 d0       	rcall	.+434    	; 0x95a <__fp_cmp>
 7a8:	08 f4       	brcc	.+2      	; 0x7ac <__cmpsf2+0x6>
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	08 95       	ret

000007ae <__divsf3>:
 7ae:	0c d0       	rcall	.+24     	; 0x7c8 <__divsf3x>
 7b0:	0f c1       	rjmp	.+542    	; 0x9d0 <__fp_round>
 7b2:	07 d1       	rcall	.+526    	; 0x9c2 <__fp_pscB>
 7b4:	40 f0       	brcs	.+16     	; 0x7c6 <__divsf3+0x18>
 7b6:	fe d0       	rcall	.+508    	; 0x9b4 <__fp_pscA>
 7b8:	30 f0       	brcs	.+12     	; 0x7c6 <__divsf3+0x18>
 7ba:	21 f4       	brne	.+8      	; 0x7c4 <__divsf3+0x16>
 7bc:	5f 3f       	cpi	r21, 0xFF	; 255
 7be:	19 f0       	breq	.+6      	; 0x7c6 <__divsf3+0x18>
 7c0:	f0 c0       	rjmp	.+480    	; 0x9a2 <__fp_inf>
 7c2:	51 11       	cpse	r21, r1
 7c4:	39 c1       	rjmp	.+626    	; 0xa38 <__fp_szero>
 7c6:	f3 c0       	rjmp	.+486    	; 0x9ae <__fp_nan>

000007c8 <__divsf3x>:
 7c8:	14 d1       	rcall	.+552    	; 0x9f2 <__fp_split3>
 7ca:	98 f3       	brcs	.-26     	; 0x7b2 <__divsf3+0x4>

000007cc <__divsf3_pse>:
 7cc:	99 23       	and	r25, r25
 7ce:	c9 f3       	breq	.-14     	; 0x7c2 <__divsf3+0x14>
 7d0:	55 23       	and	r21, r21
 7d2:	b1 f3       	breq	.-20     	; 0x7c0 <__divsf3+0x12>
 7d4:	95 1b       	sub	r25, r21
 7d6:	55 0b       	sbc	r21, r21
 7d8:	bb 27       	eor	r27, r27
 7da:	aa 27       	eor	r26, r26
 7dc:	62 17       	cp	r22, r18
 7de:	73 07       	cpc	r23, r19
 7e0:	84 07       	cpc	r24, r20
 7e2:	38 f0       	brcs	.+14     	; 0x7f2 <__divsf3_pse+0x26>
 7e4:	9f 5f       	subi	r25, 0xFF	; 255
 7e6:	5f 4f       	sbci	r21, 0xFF	; 255
 7e8:	22 0f       	add	r18, r18
 7ea:	33 1f       	adc	r19, r19
 7ec:	44 1f       	adc	r20, r20
 7ee:	aa 1f       	adc	r26, r26
 7f0:	a9 f3       	breq	.-22     	; 0x7dc <__divsf3_pse+0x10>
 7f2:	33 d0       	rcall	.+102    	; 0x85a <__divsf3_pse+0x8e>
 7f4:	0e 2e       	mov	r0, r30
 7f6:	3a f0       	brmi	.+14     	; 0x806 <__divsf3_pse+0x3a>
 7f8:	e0 e8       	ldi	r30, 0x80	; 128
 7fa:	30 d0       	rcall	.+96     	; 0x85c <__divsf3_pse+0x90>
 7fc:	91 50       	subi	r25, 0x01	; 1
 7fe:	50 40       	sbci	r21, 0x00	; 0
 800:	e6 95       	lsr	r30
 802:	00 1c       	adc	r0, r0
 804:	ca f7       	brpl	.-14     	; 0x7f8 <__divsf3_pse+0x2c>
 806:	29 d0       	rcall	.+82     	; 0x85a <__divsf3_pse+0x8e>
 808:	fe 2f       	mov	r31, r30
 80a:	27 d0       	rcall	.+78     	; 0x85a <__divsf3_pse+0x8e>
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	bb 1f       	adc	r27, r27
 814:	26 17       	cp	r18, r22
 816:	37 07       	cpc	r19, r23
 818:	48 07       	cpc	r20, r24
 81a:	ab 07       	cpc	r26, r27
 81c:	b0 e8       	ldi	r27, 0x80	; 128
 81e:	09 f0       	breq	.+2      	; 0x822 <__divsf3_pse+0x56>
 820:	bb 0b       	sbc	r27, r27
 822:	80 2d       	mov	r24, r0
 824:	bf 01       	movw	r22, r30
 826:	ff 27       	eor	r31, r31
 828:	93 58       	subi	r25, 0x83	; 131
 82a:	5f 4f       	sbci	r21, 0xFF	; 255
 82c:	2a f0       	brmi	.+10     	; 0x838 <__divsf3_pse+0x6c>
 82e:	9e 3f       	cpi	r25, 0xFE	; 254
 830:	51 05       	cpc	r21, r1
 832:	68 f0       	brcs	.+26     	; 0x84e <__divsf3_pse+0x82>
 834:	b6 c0       	rjmp	.+364    	; 0x9a2 <__fp_inf>
 836:	00 c1       	rjmp	.+512    	; 0xa38 <__fp_szero>
 838:	5f 3f       	cpi	r21, 0xFF	; 255
 83a:	ec f3       	brlt	.-6      	; 0x836 <__divsf3_pse+0x6a>
 83c:	98 3e       	cpi	r25, 0xE8	; 232
 83e:	dc f3       	brlt	.-10     	; 0x836 <__divsf3_pse+0x6a>
 840:	86 95       	lsr	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	b7 95       	ror	r27
 848:	f7 95       	ror	r31
 84a:	9f 5f       	subi	r25, 0xFF	; 255
 84c:	c9 f7       	brne	.-14     	; 0x840 <__divsf3_pse+0x74>
 84e:	88 0f       	add	r24, r24
 850:	91 1d       	adc	r25, r1
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	97 f9       	bld	r25, 7
 858:	08 95       	ret
 85a:	e1 e0       	ldi	r30, 0x01	; 1
 85c:	66 0f       	add	r22, r22
 85e:	77 1f       	adc	r23, r23
 860:	88 1f       	adc	r24, r24
 862:	bb 1f       	adc	r27, r27
 864:	62 17       	cp	r22, r18
 866:	73 07       	cpc	r23, r19
 868:	84 07       	cpc	r24, r20
 86a:	ba 07       	cpc	r27, r26
 86c:	20 f0       	brcs	.+8      	; 0x876 <__divsf3_pse+0xaa>
 86e:	62 1b       	sub	r22, r18
 870:	73 0b       	sbc	r23, r19
 872:	84 0b       	sbc	r24, r20
 874:	ba 0b       	sbc	r27, r26
 876:	ee 1f       	adc	r30, r30
 878:	88 f7       	brcc	.-30     	; 0x85c <__divsf3_pse+0x90>
 87a:	e0 95       	com	r30
 87c:	08 95       	ret

0000087e <__fixsfsi>:
 87e:	04 d0       	rcall	.+8      	; 0x888 <__fixunssfsi>
 880:	68 94       	set
 882:	b1 11       	cpse	r27, r1
 884:	d9 c0       	rjmp	.+434    	; 0xa38 <__fp_szero>
 886:	08 95       	ret

00000888 <__fixunssfsi>:
 888:	bc d0       	rcall	.+376    	; 0xa02 <__fp_splitA>
 88a:	88 f0       	brcs	.+34     	; 0x8ae <__fixunssfsi+0x26>
 88c:	9f 57       	subi	r25, 0x7F	; 127
 88e:	90 f0       	brcs	.+36     	; 0x8b4 <__fixunssfsi+0x2c>
 890:	b9 2f       	mov	r27, r25
 892:	99 27       	eor	r25, r25
 894:	b7 51       	subi	r27, 0x17	; 23
 896:	a0 f0       	brcs	.+40     	; 0x8c0 <__fixunssfsi+0x38>
 898:	d1 f0       	breq	.+52     	; 0x8ce <__fixunssfsi+0x46>
 89a:	66 0f       	add	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	1a f0       	brmi	.+6      	; 0x8aa <__fixunssfsi+0x22>
 8a4:	ba 95       	dec	r27
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__fixunssfsi+0x12>
 8a8:	12 c0       	rjmp	.+36     	; 0x8ce <__fixunssfsi+0x46>
 8aa:	b1 30       	cpi	r27, 0x01	; 1
 8ac:	81 f0       	breq	.+32     	; 0x8ce <__fixunssfsi+0x46>
 8ae:	c3 d0       	rcall	.+390    	; 0xa36 <__fp_zero>
 8b0:	b1 e0       	ldi	r27, 0x01	; 1
 8b2:	08 95       	ret
 8b4:	c0 c0       	rjmp	.+384    	; 0xa36 <__fp_zero>
 8b6:	67 2f       	mov	r22, r23
 8b8:	78 2f       	mov	r23, r24
 8ba:	88 27       	eor	r24, r24
 8bc:	b8 5f       	subi	r27, 0xF8	; 248
 8be:	39 f0       	breq	.+14     	; 0x8ce <__fixunssfsi+0x46>
 8c0:	b9 3f       	cpi	r27, 0xF9	; 249
 8c2:	cc f3       	brlt	.-14     	; 0x8b6 <__fixunssfsi+0x2e>
 8c4:	86 95       	lsr	r24
 8c6:	77 95       	ror	r23
 8c8:	67 95       	ror	r22
 8ca:	b3 95       	inc	r27
 8cc:	d9 f7       	brne	.-10     	; 0x8c4 <__fixunssfsi+0x3c>
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__fixunssfsi+0x56>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	08 95       	ret

000008e0 <__floatunsisf>:
 8e0:	e8 94       	clt
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <__floatsisf+0x12>

000008e4 <__floatsisf>:
 8e4:	97 fb       	bst	r25, 7
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__floatsisf+0x12>
 8e8:	90 95       	com	r25
 8ea:	80 95       	com	r24
 8ec:	70 95       	com	r23
 8ee:	61 95       	neg	r22
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	99 23       	and	r25, r25
 8f8:	a9 f0       	breq	.+42     	; 0x924 <__floatsisf+0x40>
 8fa:	f9 2f       	mov	r31, r25
 8fc:	96 e9       	ldi	r25, 0x96	; 150
 8fe:	bb 27       	eor	r27, r27
 900:	93 95       	inc	r25
 902:	f6 95       	lsr	r31
 904:	87 95       	ror	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b7 95       	ror	r27
 90c:	f1 11       	cpse	r31, r1
 90e:	f8 cf       	rjmp	.-16     	; 0x900 <__floatsisf+0x1c>
 910:	fa f4       	brpl	.+62     	; 0x950 <__floatsisf+0x6c>
 912:	bb 0f       	add	r27, r27
 914:	11 f4       	brne	.+4      	; 0x91a <__floatsisf+0x36>
 916:	60 ff       	sbrs	r22, 0
 918:	1b c0       	rjmp	.+54     	; 0x950 <__floatsisf+0x6c>
 91a:	6f 5f       	subi	r22, 0xFF	; 255
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	16 c0       	rjmp	.+44     	; 0x950 <__floatsisf+0x6c>
 924:	88 23       	and	r24, r24
 926:	11 f0       	breq	.+4      	; 0x92c <__floatsisf+0x48>
 928:	96 e9       	ldi	r25, 0x96	; 150
 92a:	11 c0       	rjmp	.+34     	; 0x94e <__floatsisf+0x6a>
 92c:	77 23       	and	r23, r23
 92e:	21 f0       	breq	.+8      	; 0x938 <__floatsisf+0x54>
 930:	9e e8       	ldi	r25, 0x8E	; 142
 932:	87 2f       	mov	r24, r23
 934:	76 2f       	mov	r23, r22
 936:	05 c0       	rjmp	.+10     	; 0x942 <__floatsisf+0x5e>
 938:	66 23       	and	r22, r22
 93a:	71 f0       	breq	.+28     	; 0x958 <__floatsisf+0x74>
 93c:	96 e8       	ldi	r25, 0x86	; 134
 93e:	86 2f       	mov	r24, r22
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	2a f0       	brmi	.+10     	; 0x950 <__floatsisf+0x6c>
 946:	9a 95       	dec	r25
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	da f7       	brpl	.-10     	; 0x946 <__floatsisf+0x62>
 950:	88 0f       	add	r24, r24
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__fp_cmp>:
 95a:	99 0f       	add	r25, r25
 95c:	00 08       	sbc	r0, r0
 95e:	55 0f       	add	r21, r21
 960:	aa 0b       	sbc	r26, r26
 962:	e0 e8       	ldi	r30, 0x80	; 128
 964:	fe ef       	ldi	r31, 0xFE	; 254
 966:	16 16       	cp	r1, r22
 968:	17 06       	cpc	r1, r23
 96a:	e8 07       	cpc	r30, r24
 96c:	f9 07       	cpc	r31, r25
 96e:	c0 f0       	brcs	.+48     	; 0x9a0 <__fp_cmp+0x46>
 970:	12 16       	cp	r1, r18
 972:	13 06       	cpc	r1, r19
 974:	e4 07       	cpc	r30, r20
 976:	f5 07       	cpc	r31, r21
 978:	98 f0       	brcs	.+38     	; 0x9a0 <__fp_cmp+0x46>
 97a:	62 1b       	sub	r22, r18
 97c:	73 0b       	sbc	r23, r19
 97e:	84 0b       	sbc	r24, r20
 980:	95 0b       	sbc	r25, r21
 982:	39 f4       	brne	.+14     	; 0x992 <__fp_cmp+0x38>
 984:	0a 26       	eor	r0, r26
 986:	61 f0       	breq	.+24     	; 0x9a0 <__fp_cmp+0x46>
 988:	23 2b       	or	r18, r19
 98a:	24 2b       	or	r18, r20
 98c:	25 2b       	or	r18, r21
 98e:	21 f4       	brne	.+8      	; 0x998 <__fp_cmp+0x3e>
 990:	08 95       	ret
 992:	0a 26       	eor	r0, r26
 994:	09 f4       	brne	.+2      	; 0x998 <__fp_cmp+0x3e>
 996:	a1 40       	sbci	r26, 0x01	; 1
 998:	a6 95       	lsr	r26
 99a:	8f ef       	ldi	r24, 0xFF	; 255
 99c:	81 1d       	adc	r24, r1
 99e:	81 1d       	adc	r24, r1
 9a0:	08 95       	ret

000009a2 <__fp_inf>:
 9a2:	97 f9       	bld	r25, 7
 9a4:	9f 67       	ori	r25, 0x7F	; 127
 9a6:	80 e8       	ldi	r24, 0x80	; 128
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	08 95       	ret

000009ae <__fp_nan>:
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	80 ec       	ldi	r24, 0xC0	; 192
 9b2:	08 95       	ret

000009b4 <__fp_pscA>:
 9b4:	00 24       	eor	r0, r0
 9b6:	0a 94       	dec	r0
 9b8:	16 16       	cp	r1, r22
 9ba:	17 06       	cpc	r1, r23
 9bc:	18 06       	cpc	r1, r24
 9be:	09 06       	cpc	r0, r25
 9c0:	08 95       	ret

000009c2 <__fp_pscB>:
 9c2:	00 24       	eor	r0, r0
 9c4:	0a 94       	dec	r0
 9c6:	12 16       	cp	r1, r18
 9c8:	13 06       	cpc	r1, r19
 9ca:	14 06       	cpc	r1, r20
 9cc:	05 06       	cpc	r0, r21
 9ce:	08 95       	ret

000009d0 <__fp_round>:
 9d0:	09 2e       	mov	r0, r25
 9d2:	03 94       	inc	r0
 9d4:	00 0c       	add	r0, r0
 9d6:	11 f4       	brne	.+4      	; 0x9dc <__fp_round+0xc>
 9d8:	88 23       	and	r24, r24
 9da:	52 f0       	brmi	.+20     	; 0x9f0 <__fp_round+0x20>
 9dc:	bb 0f       	add	r27, r27
 9de:	40 f4       	brcc	.+16     	; 0x9f0 <__fp_round+0x20>
 9e0:	bf 2b       	or	r27, r31
 9e2:	11 f4       	brne	.+4      	; 0x9e8 <__fp_round+0x18>
 9e4:	60 ff       	sbrs	r22, 0
 9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__fp_round+0x20>
 9e8:	6f 5f       	subi	r22, 0xFF	; 255
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	08 95       	ret

000009f2 <__fp_split3>:
 9f2:	57 fd       	sbrc	r21, 7
 9f4:	90 58       	subi	r25, 0x80	; 128
 9f6:	44 0f       	add	r20, r20
 9f8:	55 1f       	adc	r21, r21
 9fa:	59 f0       	breq	.+22     	; 0xa12 <__fp_splitA+0x10>
 9fc:	5f 3f       	cpi	r21, 0xFF	; 255
 9fe:	71 f0       	breq	.+28     	; 0xa1c <__fp_splitA+0x1a>
 a00:	47 95       	ror	r20

00000a02 <__fp_splitA>:
 a02:	88 0f       	add	r24, r24
 a04:	97 fb       	bst	r25, 7
 a06:	99 1f       	adc	r25, r25
 a08:	61 f0       	breq	.+24     	; 0xa22 <__fp_splitA+0x20>
 a0a:	9f 3f       	cpi	r25, 0xFF	; 255
 a0c:	79 f0       	breq	.+30     	; 0xa2c <__fp_splitA+0x2a>
 a0e:	87 95       	ror	r24
 a10:	08 95       	ret
 a12:	12 16       	cp	r1, r18
 a14:	13 06       	cpc	r1, r19
 a16:	14 06       	cpc	r1, r20
 a18:	55 1f       	adc	r21, r21
 a1a:	f2 cf       	rjmp	.-28     	; 0xa00 <__fp_split3+0xe>
 a1c:	46 95       	lsr	r20
 a1e:	f1 df       	rcall	.-30     	; 0xa02 <__fp_splitA>
 a20:	08 c0       	rjmp	.+16     	; 0xa32 <__fp_splitA+0x30>
 a22:	16 16       	cp	r1, r22
 a24:	17 06       	cpc	r1, r23
 a26:	18 06       	cpc	r1, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	f1 cf       	rjmp	.-30     	; 0xa0e <__fp_splitA+0xc>
 a2c:	86 95       	lsr	r24
 a2e:	71 05       	cpc	r23, r1
 a30:	61 05       	cpc	r22, r1
 a32:	08 94       	sec
 a34:	08 95       	ret

00000a36 <__fp_zero>:
 a36:	e8 94       	clt

00000a38 <__fp_szero>:
 a38:	bb 27       	eor	r27, r27
 a3a:	66 27       	eor	r22, r22
 a3c:	77 27       	eor	r23, r23
 a3e:	cb 01       	movw	r24, r22
 a40:	97 f9       	bld	r25, 7
 a42:	08 95       	ret

00000a44 <__gesf2>:
 a44:	8a df       	rcall	.-236    	; 0x95a <__fp_cmp>
 a46:	08 f4       	brcc	.+2      	; 0xa4a <__gesf2+0x6>
 a48:	8f ef       	ldi	r24, 0xFF	; 255
 a4a:	08 95       	ret

00000a4c <__mulsf3>:
 a4c:	0a d0       	rcall	.+20     	; 0xa62 <__mulsf3x>
 a4e:	c0 cf       	rjmp	.-128    	; 0x9d0 <__fp_round>
 a50:	b1 df       	rcall	.-158    	; 0x9b4 <__fp_pscA>
 a52:	28 f0       	brcs	.+10     	; 0xa5e <__mulsf3+0x12>
 a54:	b6 df       	rcall	.-148    	; 0x9c2 <__fp_pscB>
 a56:	18 f0       	brcs	.+6      	; 0xa5e <__mulsf3+0x12>
 a58:	95 23       	and	r25, r21
 a5a:	09 f0       	breq	.+2      	; 0xa5e <__mulsf3+0x12>
 a5c:	a2 cf       	rjmp	.-188    	; 0x9a2 <__fp_inf>
 a5e:	a7 cf       	rjmp	.-178    	; 0x9ae <__fp_nan>
 a60:	eb cf       	rjmp	.-42     	; 0xa38 <__fp_szero>

00000a62 <__mulsf3x>:
 a62:	c7 df       	rcall	.-114    	; 0x9f2 <__fp_split3>
 a64:	a8 f3       	brcs	.-22     	; 0xa50 <__mulsf3+0x4>

00000a66 <__mulsf3_pse>:
 a66:	99 23       	and	r25, r25
 a68:	d9 f3       	breq	.-10     	; 0xa60 <__mulsf3+0x14>
 a6a:	55 23       	and	r21, r21
 a6c:	c9 f3       	breq	.-14     	; 0xa60 <__mulsf3+0x14>
 a6e:	95 0f       	add	r25, r21
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	55 1f       	adc	r21, r21
 a74:	aa 27       	eor	r26, r26
 a76:	ee 27       	eor	r30, r30
 a78:	ff 27       	eor	r31, r31
 a7a:	bb 27       	eor	r27, r27
 a7c:	00 24       	eor	r0, r0
 a7e:	08 94       	sec
 a80:	67 95       	ror	r22
 a82:	20 f4       	brcc	.+8      	; 0xa8c <__mulsf3_pse+0x26>
 a84:	e2 0f       	add	r30, r18
 a86:	f3 1f       	adc	r31, r19
 a88:	b4 1f       	adc	r27, r20
 a8a:	0a 1e       	adc	r0, r26
 a8c:	22 0f       	add	r18, r18
 a8e:	33 1f       	adc	r19, r19
 a90:	44 1f       	adc	r20, r20
 a92:	aa 1f       	adc	r26, r26
 a94:	66 95       	lsr	r22
 a96:	a9 f7       	brne	.-22     	; 0xa82 <__mulsf3_pse+0x1c>
 a98:	77 95       	ror	r23
 a9a:	30 f4       	brcc	.+12     	; 0xaa8 <__mulsf3_pse+0x42>
 a9c:	f3 0f       	add	r31, r19
 a9e:	b4 1f       	adc	r27, r20
 aa0:	0a 1e       	adc	r0, r26
 aa2:	12 1e       	adc	r1, r18
 aa4:	08 f4       	brcc	.+2      	; 0xaa8 <__mulsf3_pse+0x42>
 aa6:	63 95       	inc	r22
 aa8:	33 0f       	add	r19, r19
 aaa:	44 1f       	adc	r20, r20
 aac:	aa 1f       	adc	r26, r26
 aae:	22 1f       	adc	r18, r18
 ab0:	76 95       	lsr	r23
 ab2:	99 f7       	brne	.-26     	; 0xa9a <__mulsf3_pse+0x34>
 ab4:	87 95       	ror	r24
 ab6:	20 f4       	brcc	.+8      	; 0xac0 <__mulsf3_pse+0x5a>
 ab8:	b4 0f       	add	r27, r20
 aba:	0a 1e       	adc	r0, r26
 abc:	12 1e       	adc	r1, r18
 abe:	63 1f       	adc	r22, r19
 ac0:	44 0f       	add	r20, r20
 ac2:	aa 1f       	adc	r26, r26
 ac4:	22 1f       	adc	r18, r18
 ac6:	33 1f       	adc	r19, r19
 ac8:	86 95       	lsr	r24
 aca:	a9 f7       	brne	.-22     	; 0xab6 <__mulsf3_pse+0x50>
 acc:	86 2f       	mov	r24, r22
 ace:	71 2d       	mov	r23, r1
 ad0:	60 2d       	mov	r22, r0
 ad2:	11 24       	eor	r1, r1
 ad4:	9f 57       	subi	r25, 0x7F	; 127
 ad6:	50 40       	sbci	r21, 0x00	; 0
 ad8:	8a f0       	brmi	.+34     	; 0xafc <__mulsf3_pse+0x96>
 ada:	e1 f0       	breq	.+56     	; 0xb14 <__mulsf3_pse+0xae>
 adc:	88 23       	and	r24, r24
 ade:	4a f0       	brmi	.+18     	; 0xaf2 <__mulsf3_pse+0x8c>
 ae0:	ee 0f       	add	r30, r30
 ae2:	ff 1f       	adc	r31, r31
 ae4:	bb 1f       	adc	r27, r27
 ae6:	66 1f       	adc	r22, r22
 ae8:	77 1f       	adc	r23, r23
 aea:	88 1f       	adc	r24, r24
 aec:	91 50       	subi	r25, 0x01	; 1
 aee:	50 40       	sbci	r21, 0x00	; 0
 af0:	a9 f7       	brne	.-22     	; 0xadc <__mulsf3_pse+0x76>
 af2:	9e 3f       	cpi	r25, 0xFE	; 254
 af4:	51 05       	cpc	r21, r1
 af6:	70 f0       	brcs	.+28     	; 0xb14 <__mulsf3_pse+0xae>
 af8:	54 cf       	rjmp	.-344    	; 0x9a2 <__fp_inf>
 afa:	9e cf       	rjmp	.-196    	; 0xa38 <__fp_szero>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	ec f3       	brlt	.-6      	; 0xafa <__mulsf3_pse+0x94>
 b00:	98 3e       	cpi	r25, 0xE8	; 232
 b02:	dc f3       	brlt	.-10     	; 0xafa <__mulsf3_pse+0x94>
 b04:	86 95       	lsr	r24
 b06:	77 95       	ror	r23
 b08:	67 95       	ror	r22
 b0a:	b7 95       	ror	r27
 b0c:	f7 95       	ror	r31
 b0e:	e7 95       	ror	r30
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	c1 f7       	brne	.-16     	; 0xb04 <__mulsf3_pse+0x9e>
 b14:	fe 2b       	or	r31, r30
 b16:	88 0f       	add	r24, r24
 b18:	91 1d       	adc	r25, r1
 b1a:	96 95       	lsr	r25
 b1c:	87 95       	ror	r24
 b1e:	97 f9       	bld	r25, 7
 b20:	08 95       	ret

00000b22 <_exit>:
 b22:	f8 94       	cli

00000b24 <__stop_program>:
 b24:	ff cf       	rjmp	.-2      	; 0xb24 <__stop_program>
