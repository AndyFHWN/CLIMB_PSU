/** 
 * @WARNING do not modify!
 * 
 * PLATFORM=ti.platforms.msp430:MSP430FR5738
 * TARGET=ti.targets.msp430.MSP430 
 * PROFILE=debug
 * CGTLOCATION=null
 */

/**
 *  @fileOverview Grace
 */

/* need to use the CSL module to generate the CSL code */
var CSL = xdc.useModule('ti.mcu.msp430.csl.CSL');
var EUSCI_A0 = xdc.useModule('ti.mcu.msp430.csl2.communication.EUSCI_A0');
var EUSCI_B0 = xdc.useModule('ti.mcu.msp430.csl2.communication.EUSCI_B0');
var ADC10_B = xdc.useModule('ti.mcu.msp430.csl2.adc.ADC10_B');
var REF = xdc.useModule('ti.mcu.msp430.csl2.ref.REF');
var Timer1_A3 = xdc.useModule('ti.mcu.msp430.csl2.timer.Timer1_A3');
var Timer0_A3 = xdc.useModule('ti.mcu.msp430.csl2.timer.Timer0_A3');
var WDT_A = xdc.useModule('ti.mcu.msp430.csl2.watchdog.WDT_A');
CSL.configApiVersion = "1.30.00";  /* 1.30 added the PinMux module */

/* these modules should be part of every project */
var CS = xdc.useModule('ti.mcu.msp430.csl2.clock.CS');
var System = xdc.useModule('ti.mcu.msp430.csl2.system.System');
var GPIO = xdc.useModule('ti.mcu.msp430.csl2.gpio.GPIO');
var PinMux = xdc.module('ti.mcu.msp430.csl2.pinmux.PinMux');
var InterruptVectors = xdc.useModule('ti.mcu.msp430.csl.interrupt_vectors.InterruptVectors');

/* set stack and heap sizes as appropriate for MSP430 */
Program.sysStack = 0;
Program.stack = 64;
Program.heap = 0;
Program.argSize = 0;

/* Enable global interrupt */
System.srRegs.SR.GIE = System.srDefs.GIE;
CS.clockMode = CS.baseDefs.ClockConfigMode;
EUSCI_A0.eusciMode = EUSCI_A0.eusciBaseDefs.UARTMode;
EUSCI_A0.eusciUART.eusciUARTBaudRate = EUSCI_A0.eusciUARTDefs.BaudRate_Custom;
EUSCI_A0.eusciUART.eusciUARTCustomRate = 10400;
EUSCI_A0.eusciUART.eusciUARTPin[0] = 1;
PinMux.assignedPins = "P1.0 GPIO,P1.1 GPIO,P1.2 GPIO,P1.3 GPIO,P1.4 GPIO,P1.5 GPIO,P1.6 EUSCI_B0_I2C,P1.7 EUSCI_B0_I2C,P2.0 EUSCI_A0_UART,P2.1 EUSCI_A0_UART,P2.2 GPIO,P2.3 GPIO,P2.4 GPIO,P2.5 GPIO,P2.6 GPIO,PJ.0 GPIO,PJ.1 GPIO,PJ.2 GPIO,PJ.3 GPIO,PJ.4 GPIO,PJ.5 GPIO";
PinMux.regs.p2sel1 = 3;
EUSCI_A0.eusciUART.eusciUARTPin[1] = 1;
EUSCI_A0.regs.interruptSource[0].interruptHandler = true;
EUSCI_A0.regs.interruptSource[1].interruptHandler = true;
EUSCI_A0.regs.interruptSource[0].interruptEnable = true;
EUSCI_A0.regs.interruptSource[1].interruptEnable = true;
EUSCI_B0.eusciMode = EUSCI_B0.eusciBaseDefs.I2CMode;
EUSCI_B0.eusciI2C.eusciI2CMode = EUSCI_B0.eusciI2CDefs.eI2C_SLAVE_MODE;
EUSCI_B0.eusciI2C.eusciI2CPin[0] = 1;
PinMux.regs.p1sel1 = 192;
EUSCI_B0.eusciI2C.eusciI2CPin[1] = 1;
EUSCI_B0.eusciI2C.eusciI2CSlaveAddressSel = EUSCI_B0.eusciI2CDefs.eI2C_SINGLE_ADDRESS;
CS.csAclkSrcDivider = CS.CS_CLOCK_DIVIDER_8;
PinMux.regs.pjdir = 7;
EUSCI_B0.eusciI2C.eusciI2CClockSource = EUSCI_B0.eusciI2CDefs.eI2C_CLOCKSOURCE_SMCLK;
EUSCI_B0.eusciI2C.eusciI2CBitRate = EUSCI_B0.eusciI2CDefs.eI2C_SET_DATA_RATE_DISABLED;
EUSCI_B0.eusciI2C.eusciI2CSlaveOwnAddress[0] = 85;
EUSCI_B0.regs.interruptSource[2].interruptEnable = false;
EUSCI_B0.regs.interruptSource[2].interruptHandler = true;
EUSCI_B0.regs.interruptSource[3].interruptHandler = true;
EUSCI_B0.regs.interruptSource[4].interruptHandler = true;
EUSCI_B0.regs.interruptSource[5].interruptHandler = true;
EUSCI_B0.regs.interruptSource[6].interruptHandler = true;
EUSCI_B0.regs.interruptSource[7].interruptHandler = true;
EUSCI_B0.regs.interruptSource[8].interruptHandler = true;
EUSCI_B0.regs.interruptSource[9].interruptHandler = true;
EUSCI_B0.regs.interruptSource[10].interruptHandler = true;
EUSCI_B0.regs.interruptSource[11].interruptHandler = true;
EUSCI_B0.regs.interruptSource[12].interruptHandler = true;
EUSCI_B0.regs.interruptSource[0].interruptHandler = true;
EUSCI_B0.regs.interruptSource[1].interruptHandler = true;
EUSCI_B0.regs.interruptSource[8].interruptEnable = false;
EUSCI_B0.regs.interruptSource[9].interruptEnable = true;
EUSCI_B0.regs.interruptSource[3].interruptEnable = false;
PinMux.regs.p1dir = 0;
PinMux.regs.p1ren = 60;
PinMux.regs.p1out = 48;
GPIO.regs.interruptSource[0].interruptHandler = true;
GPIO.regs.interruptSource[1].interruptHandler = true;
GPIO.regs.interruptSource[2].interruptHandler = true;
GPIO.regs.interruptSource[3].interruptHandler = true;
GPIO.regs.interruptSource[4].interruptHandler = true;
GPIO.regs.interruptSource[5].interruptHandler = true;
GPIO.regs.interruptSource[6].interruptHandler = true;
GPIO.regs.interruptSource[7].interruptHandler = true;
PinMux.regs.p2ren = 124;
PinMux.regs.p2dir = 4;
PinMux.regs.p2out = 4;
EUSCI_B0.regs.interruptSource[1].interruptEnable = true;
EUSCI_B0.regs.interruptSource[0].interruptEnable = true;
EUSCI_B0.eusciI2C.eusciI2CClockLowTimeout = EUSCI_B0.eusciI2CDefs.eI2C_CLOCK_LOW_TIMEOUT_34MS;
EUSCI_B0.regs.interruptSource[11].interruptEnable = true;
EUSCI_B0.regs.interruptSource[12].interruptEnable = true;
ADC10_B.adc10bMode = ADC10_B.BatterySensorMode;
ADC10_B.adc10bCycleHoldTime = ADC10_B.ADC10B_CYCLEHOLD_512_CYCLES;
ADC10_B.adc10bChannelEnableIdx = 11;
ADC10_B.adc10bVRefPositive = ADC10_B.ADC10B_VREFPOS_INT;
ADC10_B.adc10bEnable = true;
REF.refMode = REF.baseDefs.REFBasicMode;
REF.refEnable = true;
REF.refVoltage = REF.REF_VREF2_5V;
ADC10_B.adc10bClockSource = ADC10_B.ADC10B_CLOCKSOURCE_SMCLK;
ADC10_B.adc10bClockDivider = ADC10_B.ADC10B_CLOCKDIVIDER_128;
Timer1_A3.timerMode = xdc.module("ti.mcu.msp430.csl2.timer.ITimer").IntervalMode;
Timer1_A3.regs.interruptSource[1].interruptEnable = true;
Timer1_A3.regs.interruptSource[1].interruptHandler = true;
Timer1_A3.intervalDesiredPeriod = 1000.482;
Timer1_A3.intervalModeActive = true;
Timer1_A3.pwmDesiredFrequency = 1.0;
Timer1_A3.compareValue[0] = 1037;
Timer1_A3.intervalModeAdvanced = true;
Timer0_A3.timerMode = xdc.module("ti.mcu.msp430.csl2.timer.ITimer").IntervalMode;
Timer0_A3.intervalModeAdvanced = true;
Timer0_A3.regs.interruptSource[1].interruptEnable = true;
Timer0_A3.regs.interruptSource[1].interruptHandler = true;
Timer0_A3.intervalDesiredPeriod = 1000.482;
Timer0_A3.intervalModeActive = true;
Timer0_A3.pwmDesiredFrequency = 1.0;
Timer0_A3.compareValue[0] = 1037;
Timer0_A3.ADCTrigger = 0;
WDT_A.watchdogMode = WDT_A.WatchdogMode;
WDT_A.wdtClkSelect = WDT_A.WDT_CLOCKSOURCE_ACLK;
WDT_A.wdtClkDivider = WDT_A.WDT_CLOCKDIVIDER_32K;
CS.csMclkSrcDivider = CS.CS_CLOCK_DIVIDER_1;
CS.csDcoFreqSel = CS.CS_DCOFSEL_3;
EUSCI_B0.eusciI2C.eusciI2CStopCondGen = EUSCI_B0.eusciI2CDefs.eI2C_NO_AUTO_STOP;
EUSCI_B0.regs.interruptSource[10].interruptEnable = true;
Timer0_A3.TACTL.timerClockSourceDivider = xdc.module("ti.mcu.msp430.csl2.timer.ITimer_A").TIMERA_CLOCKSOURCE_DIVIDER_1;
Timer1_A3.TACTL.timerClockSourceDivider = xdc.module("ti.mcu.msp430.csl2.timer.ITimer_A").TIMERA_CLOCKSOURCE_DIVIDER_1;
